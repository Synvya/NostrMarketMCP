name: Deploy Streaming Proxy to AWS ECS

on:
  push:
    branches: [ main ]
    paths:
      - 'infra/proxy/**'
      - '.github/workflows/deploy-proxy.yml'
  workflow_dispatch:

env:
  IMAGE_TAG: ${{ github.sha }}

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & push (linux/amd64)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.PROXY_ECR_REPOSITORY }}
        run: |
          IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:${IMAGE_TAG}
          docker buildx build \
            --platform linux/amd64 \
            -f infra/proxy/Dockerfile infra/proxy \
            -t $IMAGE_URI \
            --push
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Inject new image into task def
        env:
          CONTAINER_NAME: ${{ secrets.PROXY_CONTAINER_NAME }}
        run: |
          jq --arg IMAGE_URI "$IMAGE_URI" --arg NAME "$CONTAINER_NAME" \
            '.containerDefinitions |= map(if .name==$NAME then .image=$IMAGE_URI else . end)' \
            infra/proxy/task-definition-proxy.json > infra/proxy/new-task-def-proxy.json

      - name: Register task definition
        id: register-task
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://infra/proxy/new-task-def-proxy.json \
            --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "task_def_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.PROXY_ECS_CLUSTER }} \
            --service ${{ secrets.PROXY_ECS_SERVICE }} \
            --task-definition ${{ steps.register-task.outputs.task_def_arn }} \
            --force-new-deployment

      - name: Wait for service to stabilize
        run: |
          aws ecs wait services-stable \
            --cluster ${{ secrets.PROXY_ECS_CLUSTER }} \
            --services ${{ secrets.PROXY_ECS_SERVICE }}

      
      - name: Done
        if: always()
        run: echo "Proxy deploy finished with status ${{ job.status }}"