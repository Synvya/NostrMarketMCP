name: Comprehensive Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-api:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set environment variables
      run: |
        echo "API_KEY=local_test_api_key" >> $GITHUB_ENV
        echo "ENVIRONMENT=test" >> $GITHUB_ENV

    - name: Start API server in background
      run: |
        python simple_secure_server.py &
        echo $! > server.pid
        
    - name: Wait for server to be ready
      run: |
        for i in {1..30}; do
          if curl -f http://127.0.0.1:8080/health; then
            echo "Server is ready!"
            break
          fi
          echo "Waiting for server... (attempt $i/30)"
          sleep 2
        done
        
    - name: Run API tests
      run: python run_tests.py
      
    - name: Stop API server
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
        fi

  test-mcp:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set environment variables
      run: |
        echo "ENVIRONMENT=test" >> $GITHUB_ENV

    - name: Run MCP server tests
      run: python run_mcp_tests.py

  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-api, test-mcp]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set environment variables
      run: |
        echo "API_KEY=integration_test_key" >> $GITHUB_ENV
        echo "ENVIRONMENT=test" >> $GITHUB_ENV

    - name: Run API-MCP integration tests
      run: |
        echo "🔗 Running API-MCP integration tests..."
        
        # Start API server
        python simple_secure_server.py &
        API_PID=$!
        echo "Started API server with PID: $API_PID"
        
        # Wait for API server
        for i in {1..30}; do
          if curl -f http://127.0.0.1:8080/health; then
            echo "✅ API server is ready!"
            break
          fi
          echo "⏳ Waiting for API server... (attempt $i/30)"
          sleep 2
        done
        
        # Test API endpoints are working
        echo "🧪 Testing API endpoints..."
        response=$(curl -s -H "X-API-Key: integration_test_key" -H "Content-Type: application/json" -d '{"query":"test","limit":5}' http://127.0.0.1:8080/api/search_profiles)
        echo "API Response: $response"
        
        # Test MCP server tools import
        echo "🧪 Testing MCP server tools..."
        python -c "import nostr_profiles_mcp_server; print('✅ MCP server tools available')"
        
        # Cleanup API server
        kill $API_PID || true
        echo "✅ API-MCP integration tests completed successfully!"

    - name: Run MCP server integration tests
      run: |
        echo "🚀 Running real MCP server integration tests..."
        python run_mcp_integration_tests.py

  security-scan:
    runs-on: ubuntu-latest
    needs: [test-api, test-mcp]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: 3.12
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Run safety check
      run: |
        echo "🔒 Running safety check for known vulnerabilities..."
        safety check --json || true
        
    - name: Run bandit security linter
      run: |
        echo "🔒 Running bandit security analysis..."
        bandit -r . -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then
          echo "Security scan completed. Check bandit-report.json for details."
        fi 